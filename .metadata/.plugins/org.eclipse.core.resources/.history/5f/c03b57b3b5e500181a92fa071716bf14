package com.sergio.cursomc.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.sergio.cursomc.domain.Cliente;
import com.sergio.cursomc.dto.ClienteDTO;
import com.sergio.cursomc.repositories.ClienteRepository;
import com.sergio.cursomc.services.exceptions.ObjectNotFoundException;



@Service
public class ClienteService {
	
	@Autowired
	private ClienteRepository repo;
	
	/***Metodo busca no banco de dados info de categoria
	 * @throws ObjectNotFoundException */
	public Cliente find(Integer id) throws ObjectNotFoundException {
		
		Optional<Cliente> obj = repo.findById(id);
		
		return obj.orElseThrow(() -> new ObjectNotFoundException(
				"Objeto nao encontrado! Id: "+ id +", Tipo: " + Cliente.class.getName()));
		
		
	}
	
	/**public Cliente insert(Cliente obj) {
		obj.setId(null);
		
		return repo.save(obj);
		
	}
	**/
	
	public Cliente update(Cliente obj) { //atualiza o objeto
		
		Cliente newObj = find(obj.getId());
		updateData(newObj, obj);
		return repo.save(newObj);
	}
	
	public void delete(Integer id) { //deleta o objeto
		find(id);
		try {
		repo.deleteById(id);
		}
		catch(DataIntegrityViolationException e) {
			
			throw new DataIntegrityViolationException("Nao Ã© possivel excluir uma categoria que possui produtos! ");
		}
	}
	
	public List<Cliente> findAll(){
		
		return repo.findAll();
		
	}
	
	//paginacao
	
	public Page<Cliente> findPage(Integer page, Integer linesPerPage, String orderBy, String direction){
		
		PageRequest pageRequest = PageRequest.of(page, linesPerPage, Direction.valueOf(direction), orderBy);
		
		return repo.findAll(pageRequest);
	}
	
	//metodo auxiliar que instancia apartir de uma Cliente
	public Cliente fromDTO(ClienteDTO objDto) {
		
		return new Cliente(objDto.getId(), objDto.getNome(), objDto.getEmail(), null, null);
	}
}
